#!/usr/bin/env python
"""
NAO plays a melody on the xylophone
Group C: Zhiyu Wang, Yijia Qian, Yuan Cao

Requirements:
NAOqi Python SDK Version: 2.1
Libraries: numpy, panda, ast, time

This script will allow the NAO robot to play a melody on the xylophone. The melody is stored in a CSV file, which can be
generated or written by the user.
The robot will play the melody by striking the xylophone keys with the mallets.
It will use the arm positions and wrist angles stored in the CSV file, generated by compute_keyposition, to strike the
keys at the correct time.

Developer: Zhiyu Wang
for the course "Humanoid Robotics System" as the final project: Task 3 & 4
"""
import csv
import time
import math
from naoqi import ALProxy
import motion
import ast
import pandas as pd
import numpy as np

def playMelodyFromCSV(robotIP, PORT, name_queue, stop_event, play_event):
    motionProxy = ALProxy("ALMotion", robotIP, PORT)
    try:
        while not stop_event.is_set():
            while not name_queue.empty():
                note_filename = name_queue.get()
                while play_event.is_set():
                    key_dict = {}
                    # Load the CSV file to examine its content
                    with open('./src/keysposition.csv', 'r') as f:
                        reader = csv.reader(f)
                        header = reader.next()

                        col_index = {col_name: idx for idx, col_name in enumerate(header)}

                        for row in reader:
                            note_key = row[col_index["key"]]
                            arm_pos_str = row[col_index["arm_position"]]
                            strike_angle_str = row[col_index["strike_wrist_angle"]]

                            arm_position = ast.literal_eval(arm_pos_str)
                            strike_wrist_angle = ast.literal_eval(strike_angle_str)

                            time_to_strike = float(row[col_index["time"]])
                            hand = int(row[col_index["hand"]])

                            row_dict = {
                                'key': note_key,
                                'hand': hand,
                                'arm_position': arm_position,
                                'strike_wrist_angle': strike_wrist_angle,
                                'time': time_to_strike
                            }

                            key_dict[note_key] = row_dict

                    # Load the CSV file to examine its content
                    # note_filename= "melody"
                    note_filepath = "./src/" + note_filename + ".csv"
                    notes = pd.read_csv(note_filepath)
                    notes.head()

                    # Initialize the stiffness and position of the arms
                    motionProxy.setStiffnesses("LArm",1.0)
                    motionProxy.setStiffnesses("RArm",1.0)

                    initial_rarm_position = key_dict["G7"]['arm_position']
                    initial_larm_position = key_dict["G6"]['arm_position']
                    motionProxy.positionInterpolations(["RArm"], motion.FRAME_TORSO,
                                                    initial_rarm_position, motion.AXIS_MASK_ALL, [2.0])
                    motionProxy.positionInterpolations(["LArm"], motion.FRAME_TORSO,
                                                    initial_larm_position, motion.AXIS_MASK_ALL, [2.0])

                    # Play the melody
                    for _, row in notes.iterrows():
                        note_play = row['note']
                        lasting_time = float(row['lasting_time'])
                        arm_position = key_dict[note_play]['arm_position']
                        strike_wrist_angle = key_dict[note_play]['strike_wrist_angle']
                        time_to_strike = key_dict[note_play]['time']+0.15
                        hand = key_dict[note_play]['hand']

                        # Determine which arm to use based on the 'hand' column
                        if hand == 2:  # 1 indicates the left arm
                            arm = "LArm"
                            wrist = "LWristYaw"
                            prepare_wrist_angle = [strike_wrist_angle[0] + (35/180*np.pi)]

                        elif hand == 1:  # 2 indicates the right arm
                            arm = "RArm"
                            wrist = "RWristYaw"
                            prepare_wrist_angle = [strike_wrist_angle[0] + (35/180*np.pi)]

                        time.sleep(0.2)
                        motionProxy.setAngles(wrist, prepare_wrist_angle, 1.0)
                        motionProxy.setPositions(arm, motion.FRAME_TORSO, arm_position, 1.0, motion.AXIS_MASK_ALL)
                        time.sleep(lasting_time)
                        motionProxy.setAngles(wrist, strike_wrist_angle, 1.0)
                        time.sleep(time_to_strike)
                        # Reset wrist angle after striking

                    play_event.clear()
    except KeyboardInterrupt:
        print("Playing Thread shutting down.")

if __name__ == "__main__":
    playMelodyFromCSV("10.152.246.194",9559)
